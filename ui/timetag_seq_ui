#!/usr/bin/python

from __future__ import division
from gi.repository import Gtk
import socket
import logging
import zmq

logging.basicConfig(level=logging.DEBUG)

class SeqWindow(object):
        def operate_toggled_cb(self, button):
                if button.props.active:
                        self._tagger_cmd('reset_seq')
                        button.props.label = 'Running'
                        logging.info('Now running')
                        for w in self.widgets: w.props.sensitive = False
                else:
                        button.props.label = 'Stopped'
                        logging.info('Now stopped')
                        for w in self.widgets: w.props.sensitive = True

                self._tagger_cmd('seq_operate %d' % button.props.active)

        def reset_cb(self, button):
                logging.info('Reset')
                self.operate_btn.props.active = False
                self._tagger_cmd('seq_operate 0')
                self._tagger_cmd('reset_seq')

        def enabled_changed_cb(self, button, chan):
                active = button.props.active
                logging.info('%s channel %d' % ('Enable' if active else 'Disable', chan))
                button.props.label = 'Enabled' if active else 'Disabled'
                self._tagger_cmd('seqchan_operate %d %d' % (chan, active))

        def initial_state_changed_cb(self, button, chan):
                active = button.props.active
                button.props.label = 'High' if active else 'Low'
                self.reconfig_channel(chan)

        def reconfig_all(self):
                for c in range(4): self.reconfig_channel(c)

        def reconfig_channel(self, chan):
                state,initial_adj,low_adj,high_adj = self.controls[chan]
                time_mult = self.get_time_multiplier()
                params = {
                        'chan': chan,
                        'state': state.props.active,
                        'initial': initial_adj.props.value * time_mult,
                        'low': low_adj.props.value  * time_mult,
                        'high': high_adj.props.value * time_mult,
                }
                cmd = 'seqchan_config %(chan)d %(state)d %(initial)d %(low)d %(high)d' % params
                logging.info(cmd)
                self._tagger_cmd(cmd)

        def _build_window(self):
                self.widgets = []
                self.window = Gtk.Window()
                self.window.set_icon_name('timetag_seq_ui.svg')
                self.window.set_title('Timetagger Sequencer Configuration')
                def quit(unused):
                        Gtk.main_quit()
                self.window.connect('destroy', quit)

                vbox = Gtk.VBox()
                self.window.add(vbox)

                bbox = Gtk.HButtonBox()
                vbox.pack_start(bbox,True,True,0)

                seq_active = int(self._tagger_cmd('seq_operate?'))
                btn = Gtk.ToggleButton('Running' if seq_active else 'Stopped')
                btn.set_active(seq_active)
                btn.connect('toggled', self.operate_toggled_cb)
                self.operate_btn = btn
                bbox.pack_start(btn,True,True,0)

                btn = Gtk.Button('Reset')
                btn.connect('clicked', self.reset_cb)
                bbox.pack_start(btn,True,True,0)

                hbox = Gtk.HBox()
                vbox.pack_start(hbox,True,True,0)
                hbox.pack_start(Gtk.Label('Time Units'),True,True,0)
                combo = Gtk.ComboBoxText()
                hbox.pack_start(combo,True,True,0)
                combo.append_text('clock cycles')
                combo.append_text('microseconds')
                combo.append_text('milliseconds')
                combo.append_text('seconds')
                combo.append_text('minutes')
                combo.set_active(1)
                combo.connect('changed', lambda _: self.reconfig_all())
                self.widgets.append(combo)
                def get_time_multiplier():
                        text = combo.get_active_text()
                        if   text == 'clock cycles': return 1
                        elif text == 'microseconds': return self.freq*1e-6
                        elif text == 'milliseconds': return self.freq*1e-3
                        elif text == 'seconds': return self.freq*1
                        elif text == 'minutes': return self.freq*60
                        else: raise 'invalid time unit'
                self.get_time_multiplier = get_time_multiplier
                time_mult = self.get_time_multiplier()

                table = Gtk.Table(rows=5, columns=7)
                vbox.pack_end(table,True,True,0)

                w = Gtk.Label()
                w.set_markup('<b>Enabled</b>')
                table.attach(w, 1, 2, 0, 1)

                w = Gtk.Label()
                w.set_markup('<b>Initial</b>')
                table.attach(w, 2, 4, 0, 1)

                w = Gtk.Label()
                w.set_markup('<b>Low</b>')
                table.attach(w, 4, 5, 0, 1)

                w = Gtk.Label()
                w.set_markup('<b>High</b>')
                table.attach(w, 5, 6, 0, 1)

                self.controls = []
                for c in range(4):
                        col = 0
                        w = Gtk.Label()
                        w.set_markup('<i>Delta %d </i>' % c)
                        table.attach(w, col, col+1, c+1, c+2)
                        col += 1

                        active = int(self._tagger_cmd('seqchan_operate? %d' % c))
                        state = Gtk.ToggleButton('Enabled' if active else 'Disabled')
                        state.set_active(active)
                        state.connect('toggled', self.enabled_changed_cb, c)
                        table.attach(state, col, col+1, c+1, c+2)
                        self.widgets.append(state)
                        col += 1

                        active = int(self._tagger_cmd('seqchan_initial_state? %d' % c))
                        state = Gtk.ToggleButton('High' if active else 'Low')
                        state.set_active(active)
                        state.connect('toggled', self.initial_state_changed_cb, c)
                        table.attach(state, col, col+1, c+1, c+2)
                        self.widgets.append(state)
                        col += 1

                        val = int(self._tagger_cmd('seqchan_initial_count? %d' % c)) / time_mult
                        initial_adj = Gtk.Adjustment(value=val, lower=0, upper=1e9, step_incr=100)
                        initial_adj.connect('value-changed', lambda w,ch: self.reconfig_channel(ch), c)
                        w = Gtk.SpinButton(adjustment=initial_adj)
                        w.set_value(val)
                        table.attach(w, col, col+1, c+1, c+2)
                        self.widgets.append(w)
                        col += 1

                        val = int(self._tagger_cmd('seqchan_low_count? %d' % c)) / time_mult
                        low_adj = Gtk.Adjustment(value=val, lower=0, upper=1e9, step_incr=100)
                        low_adj.connect('value-changed', lambda w,ch: self.reconfig_channel(ch), c)
                        w = Gtk.SpinButton(adjustment=low_adj)
                        w.set_value(val)
                        table.attach(w, col, col+1, c+1, c+2)
                        self.widgets.append(w)
                        col += 1

                        val = int(self._tagger_cmd('seqchan_high_count? %d' % c)) / time_mult
                        high_adj = Gtk.Adjustment(value=val, lower=0, upper=1e9, step_incr=100)
                        high_adj.connect('value-changed', lambda w,ch: self.reconfig_channel(ch), c)
                        w = Gtk.SpinButton(adjustment=high_adj)
                        w.set_value(val)
                        table.attach(w, col, col+1, c+1, c+2)
                        self.widgets.append(w)
                        col += 1

                        self.controls.append((state, initial_adj, low_adj, high_adj))
                        
                for w in self.widgets: w.props.sensitive = not seq_active
                self.window.show_all()

        def __init__(self, socket):
                self.socket = socket               
                self.freq = int(self._tagger_cmd('seq_clockrate?'))
                self._build_window()

        def _tagger_cmd(self, cmd):
                logging.debug("Tagger command: %s" % cmd.strip())
                self.socket.send_string(cmd)
                return self.socket.recv_string()

ctx = zmq.Context().instance()
ctrl_sock = ctx.socket(zmq.REQ)
ctrl_sock.connect('ipc:///tmp/timetag-ctrl')
win = SeqWindow(ctrl_sock)
Gtk.main()

